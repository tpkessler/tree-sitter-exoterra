===
Function pointer
===

a = T -> T

---

(chunk
  (assignment_statement
    (variable_list
      (identifier))
    (expression_list
      (function_pointer_expression
        (identifier)
        (identifier)))))


===
Function pointer empty return
===

a = T -> {}

---

(chunk
  (assignment_statement
    (variable_list
      (identifier))
    (expression_list
      (function_pointer_expression
        (identifier)
        (table_constructor)))))

===
Function pointer multiple args
===

a = {T, S} -> T

---

(chunk
  (assignment_statement
    (variable_list
      (identifier))
    (expression_list
      (function_pointer_expression
        (table_constructor
          (field
            (identifier))
          (field
            (identifier)))
        (identifier)))))


===
Function pointer multiple returns
===

a = T -> {T, S}

---

(chunk
  (assignment_statement
    (variable_list
      (identifier))
    (expression_list
      (function_pointer_expression
        (identifier)
        (table_constructor
          (field
            (identifier))
          (field
            (identifier)))))))

===
Function pointer multiple args and returns
===

a = {S, T} -> {U, V, W}

---

(chunk
  (assignment_statement
    (variable_list
      (identifier))
    (expression_list
      (function_pointer_expression
        (table_constructor
          (field
            (identifier))
          (field
            (identifier)))
        (table_constructor
          (field
            (identifier))
          (field
            (identifier))
          (field
            (identifier)))))))

===
Function declaration
===

terra a :: {} -> {}

---

(chunk
  (terra_function_declaration
    (identifier)
    (function_pointer_expression
      (table_constructor)
      (table_constructor))))

===
Function declaration with variable signature
===

terra a :: ptr

---

(chunk
  (terra_function_declaration
    (identifier)
    (identifier)))


===
Struct method declaration
===

terra a:b :: T -> T

---

(chunk
  (terra_function_declaration
    (method_index_expression
      (identifier)
      (identifier))
    (function_pointer_expression
      (identifier)
      (identifier))))


===
Local function declaration
===

local terra a :: {} -> {}

---

(chunk
  (local_terra_function_declaration
    (identifier)
    (function_pointer_expression
      (table_constructor)
      (table_constructor))))

===
Empty function definition assignment
===

a = terra() end

---

(chunk
  (assignment_statement
    (variable_list
      (identifier))
    (expression_list
      (terra_function_definition
        (terra_function_parameters)))))

===
Function definition assignment with parameters
===

a = terra(x: T) return x end

---

(chunk
  (assignment_statement
    (variable_list
      (identifier))
    (expression_list
      (terra_function_definition
        (terra_function_parameters
          (identifier)
          (identifier))
        (block
          (return_statement
            (expression_list
              (identifier))))))))

===
Function definition with return value
===

a = terra(x: T): S end

---

(chunk
  (assignment_statement
    (variable_list
      (identifier))
    (expression_list
      (terra_function_definition
        (terra_function_parameters
          (identifier)
          (identifier)
          (identifier))))))

===
Function definition with multiple arguments and return value
===

a = terra(x: T, y: U): [f(S)] end

---

(chunk
  (assignment_statement
    (variable_list
      (identifier))
    (expression_list
      (terra_function_definition
        (terra_function_parameters
          (identifier)
          (identifier)
          (identifier)
          (identifier)
          (escape_expression
            (function_call
              (identifier)
              (arguments
                (identifier)))))))))

===
Empty terra function implementation
===

terra f()
end

---

(chunk
  (terra_function_implementation
    (identifier)
    (terra_function_parameters)))

===
Terra function implementation with arguments
===

terra f(x: T)

end

---

(chunk
  (terra_function_implementation
    (identifier)
    (terra_function_parameters
      (identifier)
      (identifier))))

===
Terra function implementation with arguments and return
===

terra f(x: T): S

end

---

(chunk
  (terra_function_implementation
    (identifier)
    (terra_function_parameters
      (identifier)
      (identifier)
      (identifier))))

===
Struct method implementation
===

terra A:f(x: T, y: U): S

end

---

(chunk
  (terra_function_implementation
    (method_index_expression
      (identifier)
      (identifier))
    (terra_function_parameters
      (identifier)
      (identifier)
      (identifier)
      (identifier)
      (identifier))))

===
Terra function as table entry
===

terra A.f(x: T, y: S, z: U): W

end

---

(chunk
  (terra_function_implementation
    (dot_index_expression
      (identifier)
      (identifier))
    (terra_function_parameters
      (identifier)
      (identifier)
      (identifier)
      (identifier)
      (identifier)
      (identifier)
      (identifier))))

===
Empty local terra function
===

local terra f()

end

---

(chunk
  (terra_local_function_implementation
    (identifier)
    (terra_function_parameters)))

===
Local terra function with metaprogramming
===

local terra [f(A)](x: T): S
end

---

(chunk
  (terra_local_function_implementation
    (escape_expression
      (function_call
        (identifier)
        (arguments
          (identifier))))
    (terra_function_parameters
      (identifier)
      (identifier)
      (identifier))))

===
Cast
===

a = [T](b)

---

(chunk
  (assignment_statement
    (variable_list
      (identifier))
    (expression_list
      (function_call
        (escape_expression
          (identifier))
        (arguments
          (identifier))))))
